#!/bin/bash

# Auto-permiss√£o: garante que o script tenha permiss√£o de execu√ß√£o
chmod +x "$0"

echo "=========================================="
echo "üîß LIMPEZA DE BRANCHES "
echo "=========================================="
echo "üìÅ Projeto: $(basename "$(git rev-parse --show-toplevel)")"
echo "üë§ Usu√°rio: $(git config user.name)"
echo "üìç Branch atual: $(git branch --show-current)"
echo "=========================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Verificar se estamos em um reposit√≥rio Git
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå ERRO: Este diret√≥rio n√£o √© um reposit√≥rio Git!${NC}"
    exit 1
fi

# Determinar branch principal (main ou master)
if git show-ref --verify --quiet refs/heads/main; then
    MAIN_BRANCH="main"
elif git show-ref --verify --quiet refs/heads/master; then
    MAIN_BRANCH="master"
else
    echo -e "${RED}‚ùå ERRO: N√£o foi poss√≠vel encontrar branch principal (main/master)${NC}"
    exit 1
fi

echo ""
echo -e "${BLUE}üìã 1. FAZENDO BACKUP DAS BRANCHES ATUAIS...${NC}"
BACKUP_FILE="backup_branches_$(date +%Y%m%d_%H%M%S).txt"
git branch > "$BACKUP_FILE"
echo "‚úÖ Backup salvo em: $BACKUP_FILE"

echo ""
echo -e "${BLUE}üîÑ 2. ATUALIZANDO INFORMA√á√ïES DO REPOSIT√ìRIO REMOTO...${NC}"
git fetch --all --prune
echo "‚úÖ Atualiza√ß√£o e limpeza de refer√™ncias remotas conclu√≠da!"

echo ""
echo -e "${BLUE}üìä 3. MAPEANDO SITUA√á√ÉO ATUAL...${NC}"
echo ""
echo -e "${CYAN}üìÇ Todas as branches locais:${NC}"
git branch

echo ""
echo -e "${CYAN}üåê Branches remotas ativas:${NC}"
git branch -r

echo ""
echo -e "${BLUE}‚úÖ 4. BRANCHES J√Å MERGEADAS (SEGURAS PARA EXCLUS√ÉO):${NC}"
MERGED_BRANCHES=$(git branch --merged "$MAIN_BRANCH" | grep -v -E "(main|master|\*)" | sed 's/^[ \t]*//')

if [ -z "$MERGED_BRANCHES" ]; then
    echo "üéâ Nenhuma branch local j√° mergeada encontrada!"
    MERGED_COUNT=0
else
    echo -e "${GREEN}$MERGED_BRANCHES${NC}"
    MERGED_COUNT=$(echo "$MERGED_BRANCHES" | wc -l)
    echo ""
    echo -e "${GREEN}üìä Total: $MERGED_COUNT branch(es) j√° mergeada(s)${NC}"
fi

echo ""
echo -e "${BLUE}‚ö†Ô∏è  5. BRANCHES N√ÉO MERGEADAS (REVISAR MANUALMENTE):${NC}"
NOT_MERGED_BRANCHES=$(git branch --no-merged "$MAIN_BRANCH" | grep -v -E "(main|master|\*)" | sed 's/^[ \t]*//')

if [ -z "$NOT_MERGED_BRANCHES" ]; then
    echo "‚úÖ Todas as branches locais est√£o mergeadas!"
    NOT_MERGED_COUNT=0
else
    echo -e "${RED}$NOT_MERGED_BRANCHES${NC}"
    NOT_MERGED_COUNT=$(echo "$NOT_MERGED_BRANCHES" | wc -l)
    echo ""
    echo -e "${RED}üìä Total: $NOT_MERGED_COUNT branch(es) n√£o mergeada(s)${NC}"
    echo ""
    echo -e "${YELLOW}üí° Para analisar uma branch espec√≠fica, use:${NC}"
    echo "   git log --oneline -10 nome-da-branch"
    echo "   git diff $MAIN_BRANCH..nome-da-branch --stat"
    echo "   git show --name-only nome-da-branch"
fi

echo ""
echo "=========================================="
echo -e "${BLUE}üßπ OP√á√ïES DE LIMPEZA${NC}"
echo "=========================================="

if [ $MERGED_COUNT -gt 0 ]; then
    echo -e "${YELLOW}Escolha uma op√ß√£o:${NC}"
    echo "1) üóëÔ∏è  Excluir TODAS as branches j√° mergeadas automaticamente"
    echo "2) üìã Apenas listar comandos para exclus√£o manual"
    echo "3) ‚ùå N√£o fazer nenhuma exclus√£o"
    echo ""
    echo -n "Digite sua escolha (1-3): "
    read -r choice
    
    case $choice in
        1)
            echo ""
            echo -e "${YELLOW}üö® CONFIRMA√á√ÉO FINAL${NC}"
            echo "Isso ir√° excluir permanentemente as seguintes branches:"
            echo -e "${RED}$MERGED_BRANCHES${NC}"
            echo ""
            echo -n "Tem certeza? Digite 'SIM' para confirmar: "
            read -r confirmation
            
            if [ "$confirmation" = "SIM" ]; then
                echo ""
                echo -e "${GREEN}üóëÔ∏è Excluindo branches mergeadas...${NC}"
                DELETED_COUNT=0
                
                while IFS= read -r branch; do
                    if [ -n "$branch" ]; then
                        echo "   Excluindo: $branch"
                        if git branch -d "$branch" 2>/dev/null; then
                            ((DELETED_COUNT++))
                        else
                            echo -e "${RED}   ‚ö†Ô∏è Erro ao excluir: $branch${NC}"
                        fi
                    fi
                done <<< "$MERGED_BRANCHES"
                
                echo ""
                echo -e "${GREEN}‚úÖ Limpeza conclu√≠da! $DELETED_COUNT branch(es) exclu√≠da(s).${NC}"
            else
                echo -e "${YELLOW}‚ÑπÔ∏è Limpeza cancelada pelo usu√°rio.${NC}"
            fi
            ;;
        2)
            echo ""
            echo -e "${CYAN}üìã COMANDOS PARA EXCLUS√ÉO MANUAL:${NC}"
            echo ""
            while IFS= read -r branch; do
                if [ -n "$branch" ]; then
                    echo "git branch -d $branch"
                fi
            done <<< "$MERGED_BRANCHES"
            echo ""
            echo -e "${CYAN}üí° Ou execute tudo de uma vez:${NC}"
            echo "git branch --merged $MAIN_BRANCH | grep -v -E \"(main|master|\*)\" | xargs -r git branch -d"
            ;;
        3)
            echo -e "${YELLOW}‚ÑπÔ∏è Nenhuma exclus√£o realizada.${NC}"
            ;;
        *)
            echo -e "${RED}‚ùå Op√ß√£o inv√°lida. Nenhuma exclus√£o realizada.${NC}"
            ;;
    esac
else
    echo "‚ÑπÔ∏è Nenhuma branch dispon√≠vel para limpeza autom√°tica."
fi

echo ""
echo "=========================================="
echo -e "${GREEN}üéâ RELAT√ìRIO FINAL${NC}"
echo "=========================================="
echo "üìä Branches analisadas:"
echo "   ‚úÖ Mergeadas: $MERGED_COUNT"
echo "   ‚ö†Ô∏è  N√£o mergeadas: $NOT_MERGED_COUNT"
echo ""
echo "üìÅ Backup salvo em: $BACKUP_FILE"
echo "üïí Conclu√≠do em: $(date '+%d/%m/%Y √†s %H:%M:%S')"
echo "=========================================="

# Mostrar pr√≥ximos passos se houver branches n√£o mergeadas
if [ $NOT_MERGED_COUNT -gt 0 ]; then
    echo ""
    echo -e "${YELLOW}üìù PR√ìXIMOS PASSOS RECOMENDADOS:${NC}"
    echo "1. Analise cada branch n√£o mergeada individualmente"
    echo "2. Fa√ßa merge das que cont√™m c√≥digo importante"
    echo "3. Execute este script novamente para limpeza final"
    echo ""
    echo -e "${CYAN}üîß COMANDOS √öTEIS PARA AN√ÅLISE:${NC}"
    while IFS= read -r branch; do
        if [ -n "$branch" ]; then
            echo "# Analisar branch: $branch"
            echo "git log --oneline -5 $branch"
            echo "git diff $MAIN_BRANCH..$branch --name-only"
            echo "echo '---'"
        fi
    done <<< "$NOT_MERGED_BRANCHES"
fi 